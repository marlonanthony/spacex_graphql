{"version":3,"sources":["images/spacexlogo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3eb163c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacexlogo.b15ef947.jpg\";","import React from 'react'\n// import classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>Mission: <span className={launch_success ? 'text-success' : 'text-danger'}>{ mission_name }</span></h4>\n          {/* <h4>Mission: <span className={classNames({\n            'text-success': launch_success,\n            'text-danger': !launch_success \n          })}>{ mission_name }</span></h4> */}\n          <p>Date: <Moment format='MM-DD-YYYY HH:mm'>{ launch_date_local }</Moment></p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className='my-3'>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success \n      </p>\n      <p>\n        <span className='px-3 mr-2 bg-danger' /> = Failure \n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag' \nimport { Query } from 'react-apollo'\n\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`\n\nexport default class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className='display-4 my-3'>Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>\n              if(error) console.log(error)\n              \n              return (\n              <Fragment>\n                {\n                  data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                  ))\n                }\n              </Fragment>)\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag' \nimport { Query } from 'react-apollo' \nimport { Link } from 'react-router-dom'\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`\n\nexport default class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params\n    flight_number = parseInt(flight_number) \n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>\n              if(error) console.log(error) \n              \n              const { \n                mission_name, \n                flight_number, \n                launch_year, \n                launch_success, \n                rocket: { rocket_id, rocket_name, rocket_type } \n              } = data.launch \n\n              return (\n                <div>\n                  <h1 className='display-4 my-3'>\n                    <span className='text-dark'>Mission:</span> {mission_name}\n                  </h1>\n                  <h4 className='mb-3'>Launch Details</h4>\n                  <ul className='list-group'>\n                    <li className='list-group-item'>Flight Number: { flight_number }</li>\n                    <li className='list-group-item'>Launch Year: { launch_year }</li>\n                    <li className='list-group-item'>Launch Success: <span className={launch_success ? 'text-success' : 'text-danger'}>{ launch_success ? 'Yes' : 'No' }</span></li>\n                  </ul>\n                  <h4 className='my-3'>Rocket Details</h4>\n                  <ul className='list-group'>\n                    <li className='list-group-item'>Rocket ID: { rocket_id }</li>\n                    <li className='list-group-item'>Rocket Name: { rocket_name }</li>\n                    <li className='list-group-item'>Rocket Type: { rocket_type }</li>\n                  </ul>\n                  <hr/>\n                  <Link to='/' className='btn btn-secondary'>Back</Link>\n                </div>\n              )\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport ApolloClient from 'apollo-boost' \nimport { ApolloProvider } from 'react-apollo' \nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nimport './App.css'\nimport logo from './images/spacexlogo.jpg' \n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={ client }>\n        <Router>\n          <div className=\"container\">\n            <img src={logo} alt='SpaceX Logo' style={{ width: 300, display: 'block', margin: 'auto' }} />\n            <Route exact path='/' component={ Launches } />\n            <Route exact path='/launch/:flight_number' component={ Launch } />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}